# coding: utf-8

"""
    Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class InterfaceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_interface(self, **kwargs):  # noqa: E501
        """Retrieves all interfaces  # noqa: E501

        Gets all available interfaces with a maximum limit of 500  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_interface_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_interface_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves all interfaces  # noqa: E501

        Gets all available interfaces with a maximum limit of 500  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceIfListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves interface by ID  # noqa: E501

        Gets the interface for the given interface ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Interface ID (required)
        :return: DeviceIfResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_interface_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_interface_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves interface by ID  # noqa: E501

        Gets the interface for the given interface ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Interface ID (required)
        :return: DeviceIfResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_interface_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface/${id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceIfResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_count(self, **kwargs):  # noqa: E501
        """Retrieves interface count  # noqa: E501

        Gets the count of interfaces for all devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_count(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_interface_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_interface_count_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves interface count  # noqa: E501

        Gets the count of interfaces for all devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_count_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_ip_address_by_ip_address(self, ip_address, **kwargs):  # noqa: E501
        """Retrieves interfaces by IP address  # noqa: E501

        Gets list of interfaces with the given IP address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_ip_address_by_ip_address(ip_address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip_address: IP address of the interface (required)
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_interface_ip_address_by_ip_address_with_http_info(ip_address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_ip_address_by_ip_address_with_http_info(ip_address, **kwargs)  # noqa: E501
            return data

    def get_interface_ip_address_by_ip_address_with_http_info(self, ip_address, **kwargs):  # noqa: E501
        """Retrieves interfaces by IP address  # noqa: E501

        Gets list of interfaces with the given IP address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_ip_address_by_ip_address_with_http_info(ip_address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip_address: IP address of the interface (required)
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip_address']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_ip_address_by_ip_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ip_address' is set
        if ('ip_address' not in params or
                params['ip_address'] is None):
            raise ValueError("Missing the required parameter `ip_address` when calling `get_interface_ip_address_by_ip_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip_address' in params:
            path_params['ipAddress'] = params['ip_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface/ip-address/${ipAddress}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceIfListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_isis(self, **kwargs):  # noqa: E501
        """Retrieves ISIS interfaces  # noqa: E501

        Gets the interfaces that has ISIS enabled  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_isis(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_interface_isis_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_isis_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_interface_isis_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves ISIS interfaces  # noqa: E501

        Gets the interfaces that has ISIS enabled  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_isis_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_isis" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface/isis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceIfListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_network_device_by_device_id(self, device_id, **kwargs):  # noqa: E501
        """Retrieves device interfaces  # noqa: E501

        Gets list of interfaces for the given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_network_device_by_device_id(device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Device ID (required)
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_interface_network_device_by_device_id_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_network_device_by_device_id_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def get_interface_network_device_by_device_id_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Retrieves device interfaces  # noqa: E501

        Gets list of interfaces for the given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_network_device_by_device_id_with_http_info(device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Device ID (required)
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_network_device_by_device_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_interface_network_device_by_device_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface/network-device/{deviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceIfListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_network_device_count_by_device_id(self, device_id, **kwargs):  # noqa: E501
        """Retrieves device interface count  # noqa: E501

        Gets the interface count for the given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_network_device_count_by_device_id(device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Device ID (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_interface_network_device_count_by_device_id_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_network_device_count_by_device_id_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def get_interface_network_device_count_by_device_id_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Retrieves device interface count  # noqa: E501

        Gets the interface count for the given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_network_device_count_by_device_id_with_http_info(device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Device ID (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_network_device_count_by_device_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_interface_network_device_count_by_device_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface/network-device/{deviceId}/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_network_device_interface_name_by_device_id(self, device_id, name, **kwargs):  # noqa: E501
        """Retrieves interface for the given device and interface name  # noqa: E501

        Gets the interface for the given device ID and for the given interface name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_network_device_interface_name_by_device_id(device_id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Device ID (required)
        :param str name: Interface name (required)
        :return: DeviceIfResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_interface_network_device_interface_name_by_device_id_with_http_info(device_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_network_device_interface_name_by_device_id_with_http_info(device_id, name, **kwargs)  # noqa: E501
            return data

    def get_interface_network_device_interface_name_by_device_id_with_http_info(self, device_id, name, **kwargs):  # noqa: E501
        """Retrieves interface for the given device and interface name  # noqa: E501

        Gets the interface for the given device ID and for the given interface name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_network_device_interface_name_by_device_id_with_http_info(device_id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Device ID (required)
        :param str name: Interface name (required)
        :return: DeviceIfResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_network_device_interface_name_by_device_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_interface_network_device_interface_name_by_device_id`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_interface_network_device_interface_name_by_device_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface/network-device/${deviceId}/interface-name', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceIfResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interface_ospf(self, **kwargs):  # noqa: E501
        """Retrieves OSPF interfaces  # noqa: E501

        Gets the interfaces that has OSPF enabled  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_ospf(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_interface_ospf_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_interface_ospf_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_interface_ospf_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves OSPF interfaces  # noqa: E501

        Gets the interfaces that has OSPF enabled  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_interface_ospf_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interface_ospf" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface/ospf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceIfListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_by_device_id_range(self, device_id, start_index, records_to_return, **kwargs):  # noqa: E501
        """Retrieves device interfaces in the given range  # noqa: E501

        Gets the list of interfaces for the device for the specified range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_by_device_id_range(device_id, start_index, records_to_return, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Device ID (required)
        :param int start_index: Start index (required)
        :param int records_to_return: Number of records to return (required)
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_by_device_id_range_with_http_info(device_id, start_index, records_to_return, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_by_device_id_range_with_http_info(device_id, start_index, records_to_return, **kwargs)  # noqa: E501
            return data

    def get_network_device_by_device_id_range_with_http_info(self, device_id, start_index, records_to_return, **kwargs):  # noqa: E501
        """Retrieves device interfaces in the given range  # noqa: E501

        Gets the list of interfaces for the device for the specified range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_by_device_id_range_with_http_info(device_id, start_index, records_to_return, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Device ID (required)
        :param int start_index: Start index (required)
        :param int records_to_return: Number of records to return (required)
        :return: DeviceIfListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'start_index', 'records_to_return']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_by_device_id_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_network_device_by_device_id_range`")  # noqa: E501
        # verify the required parameter 'start_index' is set
        if ('start_index' not in params or
                params['start_index'] is None):
            raise ValueError("Missing the required parameter `start_index` when calling `get_network_device_by_device_id_range`")  # noqa: E501
        # verify the required parameter 'records_to_return' is set
        if ('records_to_return' not in params or
                params['records_to_return'] is None):
            raise ValueError("Missing the required parameter `records_to_return` when calling `get_network_device_by_device_id_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'start_index' in params:
            path_params['startIndex'] = params['start_index']  # noqa: E501
        if 'records_to_return' in params:
            path_params['recordsToReturn'] = params['records_to_return']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/interface/network-device/${deviceId}/${startIndex}/${recordsToReturn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceIfListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
