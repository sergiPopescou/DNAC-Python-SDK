# coding: utf-8

"""
    Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class NetworkDeviceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_network_device_by_id(self, id, **kwargs):  # noqa: E501
        """Delete network device by ID  # noqa: E501

        Removes the network device for the given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_network_device_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :param bool is_force_delete: isForceDelete
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_network_device_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_network_device_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_network_device_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete network device by ID  # noqa: E501

        Removes the network device for the given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_network_device_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :param bool is_force_delete: isForceDelete
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'is_force_delete']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_device_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_network_device_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'is_force_delete' in params:
            query_params.append(('isForceDelete', params['is_force_delete']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/${id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device(self, **kwargs):  # noqa: E501
        """Retrieves all network devices  # noqa: E501

        Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id's and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] hostname: hostname
        :param list[str] management_ip_address: managementIpAddress
        :param list[str] mac_address: macAddress
        :param list[str] location_name: locationName
        :param list[str] serial_number: serialNumber
        :param list[str] location: location
        :param list[str] family: family
        :param list[str] type: type
        :param list[str] series: series
        :param list[str] collection_status: collectionStatus
        :param list[str] collection_interval: collectionInterval
        :param list[str] not_synced_for_minutes: notSyncedForMinutes
        :param list[str] error_code: errorCode
        :param list[str] error_description: errorDescription
        :param list[str] software_version: softwareVersion
        :param list[str] software_type: softwareType
        :param list[str] platform_id: platformId
        :param list[str] role: role
        :param list[str] reachability_status: reachabilityStatus
        :param list[str] up_time: upTime
        :param list[str] associated_wlc_ip: associatedWlcIp
        :param list[str] license_name: licenseName
        :param list[str] license_type: licenseType
        :param list[str] license_status: licenseStatus
        :param list[str] modulename: moduleName
        :param list[str] moduleequpimenttype: moduleEqupimentType
        :param list[str] moduleservicestate: moduleServiceState
        :param list[str] modulevendorequipmenttype: moduleVendorEquipmentType
        :param list[str] modulepartnumber: modulePartNumber
        :param list[str] moduleoperationstatecode: moduleOperationStateCode
        :param str id: Accepts comma separated id's and return list of network-devices for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.
        :return: NetworkDeviceListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves all network devices  # noqa: E501

        Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id's and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] hostname: hostname
        :param list[str] management_ip_address: managementIpAddress
        :param list[str] mac_address: macAddress
        :param list[str] location_name: locationName
        :param list[str] serial_number: serialNumber
        :param list[str] location: location
        :param list[str] family: family
        :param list[str] type: type
        :param list[str] series: series
        :param list[str] collection_status: collectionStatus
        :param list[str] collection_interval: collectionInterval
        :param list[str] not_synced_for_minutes: notSyncedForMinutes
        :param list[str] error_code: errorCode
        :param list[str] error_description: errorDescription
        :param list[str] software_version: softwareVersion
        :param list[str] software_type: softwareType
        :param list[str] platform_id: platformId
        :param list[str] role: role
        :param list[str] reachability_status: reachabilityStatus
        :param list[str] up_time: upTime
        :param list[str] associated_wlc_ip: associatedWlcIp
        :param list[str] license_name: licenseName
        :param list[str] license_type: licenseType
        :param list[str] license_status: licenseStatus
        :param list[str] modulename: moduleName
        :param list[str] moduleequpimenttype: moduleEqupimentType
        :param list[str] moduleservicestate: moduleServiceState
        :param list[str] modulevendorequipmenttype: moduleVendorEquipmentType
        :param list[str] modulepartnumber: modulePartNumber
        :param list[str] moduleoperationstatecode: moduleOperationStateCode
        :param str id: Accepts comma separated id's and return list of network-devices for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.
        :return: NetworkDeviceListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hostname', 'management_ip_address', 'mac_address', 'location_name', 'serial_number', 'location', 'family', 'type', 'series', 'collection_status', 'collection_interval', 'not_synced_for_minutes', 'error_code', 'error_description', 'software_version', 'software_type', 'platform_id', 'role', 'reachability_status', 'up_time', 'associated_wlc_ip', 'license_name', 'license_type', 'license_status', 'modulename', 'moduleequpimenttype', 'moduleservicestate', 'modulevendorequipmenttype', 'modulepartnumber', 'moduleoperationstatecode', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hostname' in params:
            query_params.append(('hostname', params['hostname']))  # noqa: E501
            collection_formats['hostname'] = 'csv'  # noqa: E501
        if 'management_ip_address' in params:
            query_params.append(('managementIpAddress', params['management_ip_address']))  # noqa: E501
            collection_formats['managementIpAddress'] = 'csv'  # noqa: E501
        if 'mac_address' in params:
            query_params.append(('macAddress', params['mac_address']))  # noqa: E501
            collection_formats['macAddress'] = 'csv'  # noqa: E501
        if 'location_name' in params:
            query_params.append(('locationName', params['location_name']))  # noqa: E501
            collection_formats['locationName'] = 'csv'  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501
            collection_formats['serialNumber'] = 'csv'  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501
            collection_formats['location'] = 'csv'  # noqa: E501
        if 'family' in params:
            query_params.append(('family', params['family']))  # noqa: E501
            collection_formats['family'] = 'csv'  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'csv'  # noqa: E501
        if 'series' in params:
            query_params.append(('series', params['series']))  # noqa: E501
            collection_formats['series'] = 'csv'  # noqa: E501
        if 'collection_status' in params:
            query_params.append(('collectionStatus', params['collection_status']))  # noqa: E501
            collection_formats['collectionStatus'] = 'csv'  # noqa: E501
        if 'collection_interval' in params:
            query_params.append(('collectionInterval', params['collection_interval']))  # noqa: E501
            collection_formats['collectionInterval'] = 'csv'  # noqa: E501
        if 'not_synced_for_minutes' in params:
            query_params.append(('notSyncedForMinutes', params['not_synced_for_minutes']))  # noqa: E501
            collection_formats['notSyncedForMinutes'] = 'csv'  # noqa: E501
        if 'error_code' in params:
            query_params.append(('errorCode', params['error_code']))  # noqa: E501
            collection_formats['errorCode'] = 'csv'  # noqa: E501
        if 'error_description' in params:
            query_params.append(('errorDescription', params['error_description']))  # noqa: E501
            collection_formats['errorDescription'] = 'csv'  # noqa: E501
        if 'software_version' in params:
            query_params.append(('softwareVersion', params['software_version']))  # noqa: E501
            collection_formats['softwareVersion'] = 'csv'  # noqa: E501
        if 'software_type' in params:
            query_params.append(('softwareType', params['software_type']))  # noqa: E501
            collection_formats['softwareType'] = 'csv'  # noqa: E501
        if 'platform_id' in params:
            query_params.append(('platformId', params['platform_id']))  # noqa: E501
            collection_formats['platformId'] = 'csv'  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
            collection_formats['role'] = 'csv'  # noqa: E501
        if 'reachability_status' in params:
            query_params.append(('reachabilityStatus', params['reachability_status']))  # noqa: E501
            collection_formats['reachabilityStatus'] = 'csv'  # noqa: E501
        if 'up_time' in params:
            query_params.append(('upTime', params['up_time']))  # noqa: E501
            collection_formats['upTime'] = 'csv'  # noqa: E501
        if 'associated_wlc_ip' in params:
            query_params.append(('associatedWlcIp', params['associated_wlc_ip']))  # noqa: E501
            collection_formats['associatedWlcIp'] = 'csv'  # noqa: E501
        if 'license_name' in params:
            query_params.append(('license.name', params['license_name']))  # noqa: E501
            collection_formats['license.name'] = 'csv'  # noqa: E501
        if 'license_type' in params:
            query_params.append(('license.type', params['license_type']))  # noqa: E501
            collection_formats['license.type'] = 'csv'  # noqa: E501
        if 'license_status' in params:
            query_params.append(('license.status', params['license_status']))  # noqa: E501
            collection_formats['license.status'] = 'csv'  # noqa: E501
        if 'modulename' in params:
            query_params.append(('module+name', params['modulename']))  # noqa: E501
            collection_formats['module+name'] = 'csv'  # noqa: E501
        if 'moduleequpimenttype' in params:
            query_params.append(('module+equpimenttype', params['moduleequpimenttype']))  # noqa: E501
            collection_formats['module+equpimenttype'] = 'csv'  # noqa: E501
        if 'moduleservicestate' in params:
            query_params.append(('module+servicestate', params['moduleservicestate']))  # noqa: E501
            collection_formats['module+servicestate'] = 'csv'  # noqa: E501
        if 'modulevendorequipmenttype' in params:
            query_params.append(('module+vendorequipmenttype', params['modulevendorequipmenttype']))  # noqa: E501
            collection_formats['module+vendorequipmenttype'] = 'csv'  # noqa: E501
        if 'modulepartnumber' in params:
            query_params.append(('module+partnumber', params['modulepartnumber']))  # noqa: E501
            collection_formats['module+partnumber'] = 'csv'  # noqa: E501
        if 'moduleoperationstatecode' in params:
            query_params.append(('module+operationstatecode', params['moduleoperationstatecode']))  # noqa: E501
            collection_formats['module+operationstatecode'] = 'csv'  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkDeviceListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_autocomplete(self, **kwargs):  # noqa: E501
        """Retrieves all network devices  # noqa: E501

        Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id's and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_autocomplete(async=True)
        >>> result = thread.get()

        :param async bool
        :param str vrf_name: vrfName
        :param str management_ip_address: managementIpAddress
        :param str hostname: hostname
        :param str mac_address: macAddress
        :param str family: family
        :param str collection_status: collectionStatus
        :param str collection_interval: collectionInterval
        :param str software_version: softwareVersion
        :param str software_type: softwareType
        :param str reachability_status: reachabilityStatus
        :param str reachability_failure_reason: reachabilityFailureReason
        :param str error_code: errorCode
        :param str platform_id: platformId
        :param str series: series
        :param str type: type
        :param str serial_number: serialNumber
        :param str up_time: upTime
        :param str role: role
        :param str role_source: roleSource
        :param str associated_wlc_ip: associatedWlcIp
        :param str offset: offset
        :param str limit: limit
        :return: RetrievesAllNetworkDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_autocomplete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_autocomplete_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_autocomplete_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves all network devices  # noqa: E501

        Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id's and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_autocomplete_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str vrf_name: vrfName
        :param str management_ip_address: managementIpAddress
        :param str hostname: hostname
        :param str mac_address: macAddress
        :param str family: family
        :param str collection_status: collectionStatus
        :param str collection_interval: collectionInterval
        :param str software_version: softwareVersion
        :param str software_type: softwareType
        :param str reachability_status: reachabilityStatus
        :param str reachability_failure_reason: reachabilityFailureReason
        :param str error_code: errorCode
        :param str platform_id: platformId
        :param str series: series
        :param str type: type
        :param str serial_number: serialNumber
        :param str up_time: upTime
        :param str role: role
        :param str role_source: roleSource
        :param str associated_wlc_ip: associatedWlcIp
        :param str offset: offset
        :param str limit: limit
        :return: RetrievesAllNetworkDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vrf_name', 'management_ip_address', 'hostname', 'mac_address', 'family', 'collection_status', 'collection_interval', 'software_version', 'software_type', 'reachability_status', 'reachability_failure_reason', 'error_code', 'platform_id', 'series', 'type', 'serial_number', 'up_time', 'role', 'role_source', 'associated_wlc_ip', 'offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_autocomplete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501
        if 'management_ip_address' in params:
            query_params.append(('managementIpAddress', params['management_ip_address']))  # noqa: E501
        if 'hostname' in params:
            query_params.append(('hostname', params['hostname']))  # noqa: E501
        if 'mac_address' in params:
            query_params.append(('macAddress', params['mac_address']))  # noqa: E501
        if 'family' in params:
            query_params.append(('family', params['family']))  # noqa: E501
        if 'collection_status' in params:
            query_params.append(('collectionStatus', params['collection_status']))  # noqa: E501
        if 'collection_interval' in params:
            query_params.append(('collectionInterval', params['collection_interval']))  # noqa: E501
        if 'software_version' in params:
            query_params.append(('softwareVersion', params['software_version']))  # noqa: E501
        if 'software_type' in params:
            query_params.append(('softwareType', params['software_type']))  # noqa: E501
        if 'reachability_status' in params:
            query_params.append(('reachabilityStatus', params['reachability_status']))  # noqa: E501
        if 'reachability_failure_reason' in params:
            query_params.append(('reachabilityFailureReason', params['reachability_failure_reason']))  # noqa: E501
        if 'error_code' in params:
            query_params.append(('errorCode', params['error_code']))  # noqa: E501
        if 'platform_id' in params:
            query_params.append(('platformId', params['platform_id']))  # noqa: E501
        if 'series' in params:
            query_params.append(('series', params['series']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501
        if 'up_time' in params:
            query_params.append(('upTime', params['up_time']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'role_source' in params:
            query_params.append(('roleSource', params['role_source']))  # noqa: E501
        if 'associated_wlc_ip' in params:
            query_params.append(('associatedWlcIp', params['associated_wlc_ip']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/autocomplete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RetrievesAllNetworkDevicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_brief_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves network device brief by ID  # noqa: E501

        Gets brief network device info such as hostname, management IP address for the given device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_brief_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: NetworkDeviceBriefNIOResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_brief_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_brief_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_device_brief_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves network device brief by ID  # noqa: E501

        Gets brief network device info such as hostname, management IP address for the given device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_brief_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: NetworkDeviceBriefNIOResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_brief_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_device_brief_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/${id}/brief', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkDeviceBriefNIOResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves network device by ID  # noqa: E501

        Gets the network device for the given device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: NetworkDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_device_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves network device by ID  # noqa: E501

        Gets the network device for the given device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: NetworkDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_device_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/${id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkDeviceResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_collection_schedule_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves the collection interval specified by device ID  # noqa: E501

        Retrieves collection interval by device id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_collection_schedule_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_collection_schedule_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_collection_schedule_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_device_collection_schedule_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the collection interval specified by device ID  # noqa: E501

        Retrieves collection interval by device id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_collection_schedule_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_collection_schedule_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_device_collection_schedule_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/${id}/collection-schedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_collection_schedule_global(self, **kwargs):  # noqa: E501
        """Retrieves the collection interval of all devices  # noqa: E501

        Retrieves collection interval of all devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_collection_schedule_global(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_collection_schedule_global_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_collection_schedule_global_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_collection_schedule_global_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the collection interval of all devices  # noqa: E501

        Retrieves collection interval of all devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_collection_schedule_global_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_collection_schedule_global" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/collection-schedule/global', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_config(self, **kwargs):  # noqa: E501
        """Retrieves device config list  # noqa: E501

        Gets the config for all devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_config(async=True)
        >>> result = thread.get()

        :param async bool
        :return: RawCliInfoNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_config_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves device config list  # noqa: E501

        Gets the config for all devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_config_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: RawCliInfoNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RawCliInfoNIOListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_config_by_network_device_id(self, network_device_id, **kwargs):  # noqa: E501
        """Retrieves device config  # noqa: E501

        Gets the device config by device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_config_by_network_device_id(network_device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str network_device_id: networkDeviceId (required)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_config_by_network_device_id_with_http_info(network_device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_config_by_network_device_id_with_http_info(network_device_id, **kwargs)  # noqa: E501
            return data

    def get_network_device_config_by_network_device_id_with_http_info(self, network_device_id, **kwargs):  # noqa: E501
        """Retrieves device config  # noqa: E501

        Gets the device config by device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_config_by_network_device_id_with_http_info(network_device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str network_device_id: networkDeviceId (required)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_device_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_config_by_network_device_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_device_id' is set
        if ('network_device_id' not in params or
                params['network_device_id'] is None):
            raise ValueError("Missing the required parameter `network_device_id` when calling `get_network_device_config_by_network_device_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'network_device_id' in params:
            path_params['networkDeviceId'] = params['network_device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/${networkDeviceId}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_config_count(self, **kwargs):  # noqa: E501
        """Retrieves config count  # noqa: E501

        Gets the count of device configs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_config_count(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_config_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_config_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_config_count_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves config count  # noqa: E501

        Gets the count of device configs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_config_count_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_config_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/config/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_count(self, **kwargs):  # noqa: E501
        """Retrieves network device count  # noqa: E501

        Gets the count of network devices filtered by management IP address, mac address, hostname and location name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_count(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_count_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves network device count  # noqa: E501

        Gets the count of network devices filtered by management IP address, mac address, hostname and location name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_count_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_functional_capability(self, **kwargs):  # noqa: E501
        """Retrieves all functional-capability of devices  # noqa: E501

        Gets the functional-capability for given devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_functional_capability(async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Accepts comma separated deviceid's and return list of functional-capabilities for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.
        :param list[str] function_name: functionName
        :return: FunctionalCapabilityListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_functional_capability_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_functional_capability_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_functional_capability_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves all functional-capability of devices  # noqa: E501

        Gets the functional-capability for given devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_functional_capability_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: Accepts comma separated deviceid's and return list of functional-capabilities for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.
        :param list[str] function_name: functionName
        :return: FunctionalCapabilityListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'function_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_functional_capability" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'function_name' in params:
            query_params.append(('functionName', params['function_name']))  # noqa: E501
            collection_formats['functionName'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/functional-capability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionalCapabilityListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_functional_capability_by_id(self, id, **kwargs):  # noqa: E501
        """Gets the functional capability by id  # noqa: E501

        Retrieve functional capability with given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_functional_capability_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: FunctionalCapabilityResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_functional_capability_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_functional_capability_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_device_functional_capability_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the functional capability by id  # noqa: E501

        Retrieve functional capability with given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_functional_capability_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: FunctionalCapabilityResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_functional_capability_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_device_functional_capability_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/functional-capability/${id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionalCapabilityResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_functional_ccapability_autocomplete(self, **kwargs):  # noqa: E501
        """Retrieve the values of given fields  # noqa: E501

        Gets the field values based on given filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_functional_ccapability_autocomplete(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] function_name: functionName
        :return: SuccessResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_functional_ccapability_autocomplete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_functional_ccapability_autocomplete_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_functional_ccapability_autocomplete_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the values of given fields  # noqa: E501

        Gets the field values based on given filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_functional_ccapability_autocomplete_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] function_name: functionName
        :return: SuccessResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['function_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_functional_ccapability_autocomplete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'function_name' in params:
            query_params.append(('functionName', params['function_name']))  # noqa: E501
            collection_formats['functionName'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/functional-capability/autocomplete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResultList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_ip_address_by_ip_address(self, ip_address, **kwargs):  # noqa: E501
        """Retrieves network device by IP address  # noqa: E501

        Gets the network device with the given IP address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_ip_address_by_ip_address(ip_address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip_address: Device IP address (required)
        :return: NetworkDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_ip_address_by_ip_address_with_http_info(ip_address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_ip_address_by_ip_address_with_http_info(ip_address, **kwargs)  # noqa: E501
            return data

    def get_network_device_ip_address_by_ip_address_with_http_info(self, ip_address, **kwargs):  # noqa: E501
        """Retrieves network device by IP address  # noqa: E501

        Gets the network device with the given IP address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_ip_address_by_ip_address_with_http_info(ip_address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip_address: Device IP address (required)
        :return: NetworkDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip_address']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_ip_address_by_ip_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ip_address' is set
        if ('ip_address' not in params or
                params['ip_address'] is None):
            raise ValueError("Missing the required parameter `ip_address` when calling `get_network_device_ip_address_by_ip_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip_address' in params:
            path_params['ipAddress'] = params['ip_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/ip-address/${ipAddress}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkDeviceResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_meraki_organization_by_id(self, id, **kwargs):  # noqa: E501
        """Get the organizations chosen while adding the meraki dashboard  # noqa: E501

        This method is used to get the selected organizations for the meraki dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_meraki_organization_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: SuccessResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_meraki_organization_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_meraki_organization_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_device_meraki_organization_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the organizations chosen while adding the meraki dashboard  # noqa: E501

        This method is used to get the selected organizations for the meraki dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_meraki_organization_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: SuccessResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_meraki_organization_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_device_meraki_organization_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/${id}/meraki-organization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResultList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_module(self, device_id, **kwargs):  # noqa: E501
        """Gives all the modules associated with given device id  # noqa: E501

        Get modules of the given device id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_module(device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: deviceId (required)
        :param str limit: limit
        :param str offset: offset
        :param list[str] name_list: nameList
        :param list[str] vendor_equipment_type_list: vendorEquipmentTypeList
        :param list[str] part_number_list: partNumberList
        :param list[str] operational_state_code_list: operationalStateCodeList
        :return: ModuleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_module_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_module_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def get_network_device_module_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Gives all the modules associated with given device id  # noqa: E501

        Get modules of the given device id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_module_with_http_info(device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: deviceId (required)
        :param str limit: limit
        :param str offset: offset
        :param list[str] name_list: nameList
        :param list[str] vendor_equipment_type_list: vendorEquipmentTypeList
        :param list[str] part_number_list: partNumberList
        :param list[str] operational_state_code_list: operationalStateCodeList
        :return: ModuleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'limit', 'offset', 'name_list', 'vendor_equipment_type_list', 'part_number_list', 'operational_state_code_list']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_network_device_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'name_list' in params:
            query_params.append(('nameList', params['name_list']))  # noqa: E501
            collection_formats['nameList'] = 'csv'  # noqa: E501
        if 'vendor_equipment_type_list' in params:
            query_params.append(('vendorEquipmentTypeList', params['vendor_equipment_type_list']))  # noqa: E501
            collection_formats['vendorEquipmentTypeList'] = 'csv'  # noqa: E501
        if 'part_number_list' in params:
            query_params.append(('partNumberList', params['part_number_list']))  # noqa: E501
            collection_formats['partNumberList'] = 'csv'  # noqa: E501
        if 'operational_state_code_list' in params:
            query_params.append(('operationalStateCodeList', params['operational_state_code_list']))  # noqa: E501
            collection_formats['operationalStateCodeList'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/module', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModuleListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_module_by_id(self, id, **kwargs):  # noqa: E501
        """Gives Module info by its id  # noqa: E501

        Get module by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_module_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: ModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_module_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_module_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_device_module_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gives Module info by its id  # noqa: E501

        Get module by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_module_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :return: ModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_module_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_device_module_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/module/${id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModuleResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_module_count(self, device_id, **kwargs):  # noqa: E501
        """Gives total number of Modules  # noqa: E501

        Get Module Count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_module_count(device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: deviceId (required)
        :param list[str] name_list: nameList
        :param list[str] vendor_equipment_type_list: vendorEquipmentTypeList
        :param list[str] part_number_list: partNumberList
        :param list[str] operational_state_code_list: operationalStateCodeList
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_module_count_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_module_count_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def get_network_device_module_count_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Gives total number of Modules  # noqa: E501

        Get Module Count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_module_count_with_http_info(device_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_id: deviceId (required)
        :param list[str] name_list: nameList
        :param list[str] vendor_equipment_type_list: vendorEquipmentTypeList
        :param list[str] part_number_list: partNumberList
        :param list[str] operational_state_code_list: operationalStateCodeList
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'name_list', 'vendor_equipment_type_list', 'part_number_list', 'operational_state_code_list']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_module_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_network_device_module_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'name_list' in params:
            query_params.append(('nameList', params['name_list']))  # noqa: E501
            collection_formats['nameList'] = 'csv'  # noqa: E501
        if 'vendor_equipment_type_list' in params:
            query_params.append(('vendorEquipmentTypeList', params['vendor_equipment_type_list']))  # noqa: E501
            collection_formats['vendorEquipmentTypeList'] = 'csv'  # noqa: E501
        if 'part_number_list' in params:
            query_params.append(('partNumberList', params['part_number_list']))  # noqa: E501
            collection_formats['partNumberList'] = 'csv'  # noqa: E501
        if 'operational_state_code_list' in params:
            query_params.append(('operationalStateCodeList', params['operational_state_code_list']))  # noqa: E501
            collection_formats['operationalStateCodeList'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/module/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_poller_cli_legit_reads(self, **kwargs):  # noqa: E501
        """Get all keywords of CLIs accepted by command runner  # noqa: E501

        Get valid keywords  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_poller_cli_legit_reads(async=True)
        >>> result = thread.get()

        :param async bool
        :return: LegitCliKeyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_poller_cli_legit_reads_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_poller_cli_legit_reads_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_poller_cli_legit_reads_with_http_info(self, **kwargs):  # noqa: E501
        """Get all keywords of CLIs accepted by command runner  # noqa: E501

        Get valid keywords  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_poller_cli_legit_reads_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: LegitCliKeyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_poller_cli_legit_reads" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device-poller/cli/legit-reads', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LegitCliKeyResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_range(self, start_index, records_to_return, **kwargs):  # noqa: E501
        """Retrieves network device by range  # noqa: E501

        Gets the list of network devices for the given range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_range(start_index, records_to_return, async=True)
        >>> result = thread.get()

        :param async bool
        :param int start_index: Start index (required)
        :param int records_to_return: Number of records to return (required)
        :return: NetworkDeviceListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_range_with_http_info(start_index, records_to_return, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_range_with_http_info(start_index, records_to_return, **kwargs)  # noqa: E501
            return data

    def get_network_device_range_with_http_info(self, start_index, records_to_return, **kwargs):  # noqa: E501
        """Retrieves network device by range  # noqa: E501

        Gets the list of network devices for the given range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_range_with_http_info(start_index, records_to_return, async=True)
        >>> result = thread.get()

        :param async bool
        :param int start_index: Start index (required)
        :param int records_to_return: Number of records to return (required)
        :return: NetworkDeviceListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'records_to_return']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_index' is set
        if ('start_index' not in params or
                params['start_index'] is None):
            raise ValueError("Missing the required parameter `start_index` when calling `get_network_device_range`")  # noqa: E501
        # verify the required parameter 'records_to_return' is set
        if ('records_to_return' not in params or
                params['records_to_return'] is None):
            raise ValueError("Missing the required parameter `records_to_return` when calling `get_network_device_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'start_index' in params:
            path_params['startIndex'] = params['start_index']  # noqa: E501
        if 'records_to_return' in params:
            path_params['recordsToReturn'] = params['records_to_return']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/${startIndex}/${recordsToReturn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkDeviceListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_serial_number_by_serial_number(self, serial_number, **kwargs):  # noqa: E501
        """Retrieves network device by serial number  # noqa: E501

        Gets the network device with the given serial number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_serial_number_by_serial_number(serial_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str serial_number: Device serial number (required)
        :return: NetworkDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_serial_number_by_serial_number_with_http_info(serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_serial_number_by_serial_number_with_http_info(serial_number, **kwargs)  # noqa: E501
            return data

    def get_network_device_serial_number_by_serial_number_with_http_info(self, serial_number, **kwargs):  # noqa: E501
        """Retrieves network device by serial number  # noqa: E501

        Gets the network device with the given serial number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_serial_number_by_serial_number_with_http_info(serial_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str serial_number: Device serial number (required)
        :return: NetworkDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serial_number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_serial_number_by_serial_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `get_network_device_serial_number_by_serial_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serial_number' in params:
            path_params['serialNumber'] = params['serial_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/serial-number/${serialNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkDeviceResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_tenantinfo_macaddress(self, **kwargs):  # noqa: E501
        """Updates certificate validation status and returns tenantId  # noqa: E501

        Registers a device for WSA notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_tenantinfo_macaddress(async=True)
        >>> result = thread.get()

        :param async bool
        :param str serial_number: Serial number of the device
        :param str macaddress: Mac addres of the device
        :return: RegisterNetworkDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_tenantinfo_macaddress_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_tenantinfo_macaddress_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_network_device_tenantinfo_macaddress_with_http_info(self, **kwargs):  # noqa: E501
        """Updates certificate validation status and returns tenantId  # noqa: E501

        Registers a device for WSA notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_tenantinfo_macaddress_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str serial_number: Serial number of the device
        :param str macaddress: Mac addres of the device
        :return: RegisterNetworkDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serial_number', 'macaddress']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_tenantinfo_macaddress" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'serial_number' in params:
            query_params.append(('serialNumber', params['serial_number']))  # noqa: E501
        if 'macaddress' in params:
            query_params.append(('macaddress', params['macaddress']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/tenantinfo/macaddress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegisterNetworkDeviceResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_vlan_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves list of VLAN data that are associated with interface for a device  # noqa: E501

        getDeviceVLANData  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_vlan_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: deviceUUID (required)
        :param str interface_type: Vlan assocaited with sub-interface
        :return: VlanListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_vlan_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_vlan_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_device_vlan_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves list of VLAN data that are associated with interface for a device  # noqa: E501

        getDeviceVLANData  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_vlan_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: deviceUUID (required)
        :param str interface_type: Vlan assocaited with sub-interface
        :return: VlanListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'interface_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_vlan_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_device_vlan_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'interface_type' in params:
            query_params.append(('interfaceType', params['interface_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/${id}/vlan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VlanListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_device_wireless_info_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves wireless lan conrtoller info by Device ID  # noqa: E501

        Gets the wireless lan controller info using the given device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_wireless_info_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: WirelessInfoResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_device_wireless_info_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_device_wireless_info_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_network_device_wireless_info_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves wireless lan conrtoller info by Device ID  # noqa: E501

        Gets the wireless lan controller info using the given device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_device_wireless_info_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Device ID (required)
        :return: WirelessInfoResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_device_wireless_info_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_network_device_wireless_info_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/{id}/wireless-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WirelessInfoResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_network_device(self, request, **kwargs):  # noqa: E501
        """Network device POST api  # noqa: E501

        Adds the device with given credential  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_network_device(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param InventoryDeviceInfo request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_network_device_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_network_device_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def post_network_device_with_http_info(self, request, **kwargs):  # noqa: E501
        """Network device POST api  # noqa: E501

        Adds the device with given credential  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_network_device_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param InventoryDeviceInfo request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_network_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_network_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_network_device_file(self, request, **kwargs):  # noqa: E501
        """Export network-device to file  # noqa: E501

        Export the selected network-device to a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_network_device_file(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ExportDeviceDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_network_device_file_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_network_device_file_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def post_network_device_file_with_http_info(self, request, **kwargs):  # noqa: E501
        """Export network-device to file  # noqa: E501

        Export the selected network-device to a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_network_device_file_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ExportDeviceDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_network_device_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_network_device_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_network_device_poller_cli_read_request(self, request, **kwargs):  # noqa: E501
        """Run read-only commands on devices to get their real-time configuration  # noqa: E501

        Submit request for read-only CLIs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_network_device_poller_cli_read_request(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CommandRunnerDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_network_device_poller_cli_read_request_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_network_device_poller_cli_read_request_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def post_network_device_poller_cli_read_request_with_http_info(self, request, **kwargs):  # noqa: E501
        """Run read-only commands on devices to get their real-time configuration  # noqa: E501

        Submit request for read-only CLIs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_network_device_poller_cli_read_request_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CommandRunnerDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_network_device_poller_cli_read_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_network_device_poller_cli_read_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device-poller/cli/read-request', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_network_device(self, request, **kwargs):  # noqa: E501
        """Network device sync api  # noqa: E501

        Sync the devices provided as input  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_network_device(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param InventoryDeviceInfo request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_network_device_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_network_device_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def put_network_device_with_http_info(self, request, **kwargs):  # noqa: E501
        """Network device sync api  # noqa: E501

        Sync the devices provided as input  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_network_device_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param InventoryDeviceInfo request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_network_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `put_network_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_network_device_brief(self, request, **kwargs):  # noqa: E501
        """Updates network device role  # noqa: E501

        Updates the role of the device as access, core, distribution, border router  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_network_device_brief(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param NetworkDeviceBriefNIO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_network_device_brief_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_network_device_brief_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def put_network_device_brief_with_http_info(self, request, **kwargs):  # noqa: E501
        """Updates network device role  # noqa: E501

        Updates the role of the device as access, core, distribution, border router  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_network_device_brief_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param NetworkDeviceBriefNIO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_network_device_brief" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `put_network_device_brief`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/brief', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_network_device_sync(self, request, **kwargs):  # noqa: E501
        """Network device sync api  # noqa: E501

        Sync's the devices. If forceSync param is false (default) then the sync would run in normal priority thread. If forceSync param is true then the sync would run in high priority thread if avaiable, else the sync will fail. Result can be seen in the child task of each device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_network_device_sync(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param NetworkDeviceSyncApiRequest request: request (required)
        :param bool force_sync: forceSync
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_network_device_sync_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_network_device_sync_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def put_network_device_sync_with_http_info(self, request, **kwargs):  # noqa: E501
        """Network device sync api  # noqa: E501

        Sync's the devices. If forceSync param is false (default) then the sync would run in normal priority thread. If forceSync param is true then the sync would run in high priority thread if avaiable, else the sync will fail. Result can be seen in the child task of each device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_network_device_sync_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param NetworkDeviceSyncApiRequest request: request (required)
        :param bool force_sync: forceSync
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'force_sync']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_network_device_sync" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `put_network_device_sync`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'force_sync' in params:
            query_params.append(('forceSync', params['force_sync']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/network-device/sync', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
